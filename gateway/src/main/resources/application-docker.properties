spring.application.name=gateway

server.port=8084
#Eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=http://servicereg:8761/eureka/

#ZIPKIN
#Here one suggest each and evey request will go through testing if it was 2 than only
# around 50% testing would be done which would be enough for testing.
management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
management.tracing.sampling.probability=1.0  


# Gateway
spring.cloud.gateway.routes[0].id=company_service
spring.cloud.gateway.routes[0].uri=http://company:8081
spring.cloud.gateway.routes[0].predicates[0]=Path=/Companies/**

#spring.cloud.gateway.routes[1].id=job_service
#spring.cloud.gateway.routes[1].uri=http://localhost:8082
#spring.cloud.gateway.routes[1].predicates[0]=Path=/jobs/**

spring.cloud.gateway.routes[1].id=job_service
#lb refers to load balance which balance load equally in all microservices
spring.cloud.gateway.routes[1].uri=http://job:8082
spring.cloud.gateway.routes[1].predicates[0]=Path=/jobs/**


spring.cloud.gateway.routes[2].id=review_service
spring.cloud.gateway.routes[2].uri=http://review:8083 
spring.cloud.gateway.routes[2].predicates[0]=Path=/reviews/**

#the request to eureka server is still going through 8761 so we also want it to go through gateway 8084
#so here we have setpath=/ so whatever requests comes will go through gateway to eureka so we have to
# only manage one request.
#path for eureka server will be http://localhost:8084/eureka/main
spring.cloud.gateway.routes[3].id=eureka-server
spring.cloud.gateway.routes[3].uri=http://servicereg:8761
spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/main 
spring.cloud.gateway.routes[3].filters[0]=SetPath=/

#If the html and css file is not seen for eureka server than these configuration is used
spring.cloud.gateway.routes[4].id=eureka-server-static
spring.cloud.gateway.routes[4].uri=http://servicereg:8761
spring.cloud.gateway.routes[4].predicates[0]=Path=/eureka/**

