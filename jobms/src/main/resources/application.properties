    jobms.url=http://localhost:8082
    companyms.url=http://localhost:8081
    reviewms.url=http://localhost:8083

spring.application.name=jobms
#H2
server.port=8082
#spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:mem:test
#spring.jpa.hibernate.ddl-auto=update

#PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/job
spring.datasource.username=jenil
spring.datasource.password=jenil
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQlDialect
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

#Eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/


#ZIPKIN
#Here one suggest each and evey request will go through testing if it was 2 than only
# around 50% testing would be done which would be enough for testing.
management.tracing.sampling.probability=1.0  

#Config-client
spring.config.import=optional:configserver:http://localhost:8080

# Resilience4J
#circuitbreaker will have instance whose name is given by us that is companybreaker
resilience4j.circuitbreaker.instances.companyBreaker.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.companyBreaker.slidingWindowSize=10
#TO calculate failure rate minimum number of calls neede
resilience4j.circuitbreaker.instances.companyBreaker.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.companyBreaker.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.companyBreaker.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.companyBreaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.companyBreaker.register-health-indicator=true
resilience4j.circuitbreaker.instances.companyBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.companyBreaker.sliding-window-type=count_based

#retry
#resilience4j.circuitbreaker.instances.companyBreaker.maxAttempts=5
#resilience4j.circuitbreaker.instances.companyBreaker.waitDuration=2000ms

#rateLimit

#it tells it will accpect 2 request in 4s
resilience4j.ratelimiter.instances.companyBreaker.limitForPeriod=2
resilience4j.ratelimiter.instances.companyBreaker.limitRefreshPeriod=4000ms
resilience4j.ratelimiter.instances.companyBreaker.timeoutDuration=0ms


#Actuator
#It shows health of the service means how many req failsed and so
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always